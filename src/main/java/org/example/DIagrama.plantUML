@startuml

package fabricas {
    interface FabricaEstrategias {
        + crearEstrategiaDetencion(): EstrategiaDetencion
    }

    class FabricaTeoremaParada {
        + crearEstrategiaDetencion(): EstrategiaDetencion
    }

    class FabricaAleatoria {
        + crearEstrategiaDetencion(): EstrategiaDetencion
    }
}

package teoremaparada {
    interface EstrategiaDetencion {
        + detectarBucle(programa: Programa): boolean
    }

    class EstrategiaTeoremaParada {
        + detectarBucle(programa: Programa): boolean
    }

    class EstrategiaAleatoria {
        + detectarBucle(programa: Programa): boolean
    }
}

class Programa {
    + ejecutar(estrategia: EstrategiaDetencion): void
    - cargarCodigo(): void
    - configurarEntrada(): void
    - ejecutarPrograma(): void
    - accionBucleInfinito(): void
    - accionTerminacion(): void
}

class ProgramaFactorial {
    + cargarCodigo(): void
    + configurarEntrada(): void
    + ejecutarPrograma(): void
    + accionBucleInfinito(): void
    + accionTerminacion(): void
}

class ProgramaFibonacci {
    + cargarCodigo(): void
    + configurarEntrada(): void
    + ejecutarPrograma(): void
    + accionBucleInfinito(): void
    + accionTerminacion(): void
}

Programa <|-- ProgramaFactorial
Programa <|-- ProgramaFibonacci

Programa "1" *-- "1" EstrategiaDetencion
EstrategiaDetencion <|-- EstrategiaTeoremaParada
EstrategiaDetencion <|-- EstrategiaAleatoria

FabricaEstrategias <|-- FabricaTeoremaParada
FabricaEstrategias <|-- FabricaAleatoria

@enduml
